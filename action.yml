name: 'OSG Build Container Action'
description: 'Builds and optionally caches/pushes the image'

inputs:
  osg_series:
    description: >-
      OSG release series used to install packages, intended for use
      with the OSG software-base image. Passed along as the
      BASE_OSG_SERIES build argument (default: 3.6)
    required: false
    default: '3.6'
  osg_repo:
    description: >-
      OSG Yum repositories enabled (including the upcoming
      equivalent), intended for use with the OSG software-base image.
      Passed along as the BASE_YUM_REPO build argument (default:
      release)
    required: false
    default: 'release'
  base_os:
    description: >-
      Operating system of the base image, intended for use with the
      OSG software-base image.  Passed along as the BASE_OS build
      argument (default: el8)
    required: false
    default: el8
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  output_image:
    description: >-
      Name of the image and tag for the resultant image build
      following the <name>/<tag> format,
      e.g. "opensciencegrid/osgvo-docker-pilot:3.6-release"
    required: false
    default: ''
  cache_image:
    description: >-
      Store built images in GitHub the GitHub cache (default: true)
    required: false
    default: true
  push_image:
    description: >-
      Push the built image to a container registry (default: false).
      Requires 'registry_url', 'registry_user', and 'registry_pass'
      arguments.
    required: false
    default: false
  registry_url:
    description: >
      URL for the target container registry
    required: false
  registry_user:
    description: >-
      Username for the target container registry. Should be kept in
      some form of GitHub secret.
    required: false
  registry_pass:
    description: >-
      Password for the target container registry. Should be kept in
      some form of GitHub secret.
    required: false
  platform:
    description: 'Platform of the image to build, e.g. "linux/amd64"'
    required: false
    default: 'linux/amd64'

outputs:
  image-list:
    description: >-
      Comma-separated list of image names. For example,
      "opensciencegrid/osgvo-docker-pilot:3.6-release,opensciencegrid/osgvo-docker-pilot:3.6-release-20221207-1729"
    value: ${{ steps.generate-tags.outputs.tag_list }}
  timestamp-image:
    description: >-
      Image name, including timestamp tag. Intended for use as a unique,
      immutable identifier. For example,
      "opensciencegrid/osgvo-docker-pilot:3.6-release-20221207-1729"
    value: ${{ steps.generate-tags.outputs.ts_image }}
  cache_key:
    description: >-
      Key referencing the GitHub cache containing the layers of the
      built container image
    value: ${{ steps.generate-tags.outputs.cache_key }}

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3

  - name: Check input requirements
    if: >-
      fromJSON(inputs.push_image)
      && ( ! inputs.registry_url
      || ! inputs.registry_user
      || ! inputs.registry_pass)
    uses: actions/github-script@v3
    with:
      script: |
        core.setFailed("'push_image' specified but missing 'registry_url', 'registry_user', or 'registry_pass'")

  - id: generate-tags
    if: success()
    name: Generate tag list
    shell: bash
    env:
      REGISTRY: ${{ inputs.registry_url }}
      OSG_REPO: ${{ inputs.osg_repo }}
      OSG_SERIES: ${{ inputs.osg_series }}
      OUTPUT_IMAGE: ${{ inputs.output_image }}
    run: |
      DEFAULT_TAG=${OSG_SERIES}-${OSG_REPO}

      if [[ -n "${OUTPUT_IMAGE}" ]]; then
          IMAGE_NAME=${OUTPUT_IMAGE}
      elif [[ ${{ inputs.context }} == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/opensciencegrid\/docker-//}:${DEFAULT_TAG}
      elif [[ -d ${{ inputs.context }} ]]; then
         # Assume that the containing dir is the image name
         IMAGE_NAME=$(basename ${{ inputs.context }}):${DEFAULT_TAG}
      else
        echo "No output_image provided and ${{ inputs.context }} is not a directory"
        exit 1
      fi

      # If we're pushing images, we need to prepend the registry for the build-push-action
      if [[ -n "${REGISTRY}" ]]; then
          IMAGE_NAME=${REGISTRY}/${IMAGE_NAME}
      fi

      TIMESTAMP=$(date +%Y%m%d-%H%M)
      TIMESTAMP_IMAGE=${IMAGE_NAME}-${TIMESTAMP}

      echo "tag_list=${IMAGE_NAME},${TIMESTAMP_IMAGE}"                          >> ${GITHUB_OUTPUT}
      echo "ts_image=${TIMESTAMP_IMAGE}"                                        >> ${GITHUB_OUTPUT}
      echo "cache_key=$(tr ':/' '_' <<< $TIMESTAMP_IMAGE)_buildx_${GITHUB_SHA}" >> ${GITHUB_OUTPUT}

  - name: Set up Docker Buildx
    if: success()
    uses: docker/setup-buildx-action@v2

  - name: Container Registry Login
    if: success() && fromJSON(inputs.push_image)
    uses: docker/login-action@v2
    with:
      registry: ${{ inputs.registry_url }}
      username: ${{ inputs.registry_user }}
      password: ${{ inputs.registry_pass }}

  - name: Build and push Docker images
    if: success()
    uses: docker/build-push-action@v3.2.0
    with:
      load: ${{ ! fromJSon(inputs.push_image) }}
      push: ${{ fromJSon(inputs.push_image) }}
      context: ${{ inputs.context }}
      platforms: ${{ inputs.platform }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.osg_repo }}
        BASE_OS=${{ inputs.base_os }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
        TIMESTAMP_IMAGE=${{ steps.generate-tags.outputs.ts_image }}
      tags: ${{ steps.generate-tags.outputs.tag_list }}
      cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  - name: Cache Docker images
    if: success() && fromJSON(inputs.cache_image)
    uses: actions/cache@v3
    with:
      path: /tmp/.buildx-cache
      key: ${{ steps.generate-tags.outputs.cache_key }}
