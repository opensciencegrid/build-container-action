name: 'Build Container Action'

description: 'Builds and caches the image'

inputs:
  osg_series:
    description: 'OSG release series used to install packages'
    required: true
  repo:
    description: 'Input string that gets passed along to the docker build args'
    required: true
  context:
    description: 'Path to container files, including Dockerfile'
    required: false
    default: '.'
  timestamp_tag:
    description: >-
      Timestamped tag name (e.g.,
      "opensciencegrid/osgvo-docker-pilot3.6-release-YYYYMMDD-hhmm")
      used to pass the Dockerfile as $TIMESTAMP_TAG
    required: false
    default: ''
  cache:
    description: 'Generate a cache per build'
    required: false
    default: true

runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v2

  - id: generate-image-name
    shell: bash
    run: |
      if [[ ${{ inputs.context }} == "." ]] || \
         [[ ${{ inputs.context }} == "./" ]]; then
         # Try to guess the image name from our docker repo naming conventions
         # E.g., opensciencegrid/docker-frontier-squid
         IMAGE_NAME=${GITHUB_REPOSITORY/opensciencegrid\/docker-//}
      elif [[ -d ${{ inputs.context }} ]]; then
         # Assume that the containing dir is the image name
         IMAGE_NAME=$(basename ${{ inputs.context }})
      else
        echo "${{ inputs.context }} is not a directory"
        exit 1
      fi
      echo "::set-output name=image::$IMAGE_NAME"
  
  - id: generate-cache-file
    shell: bash
    run: |
      if [[ ${{ inputs.cache }} == true ]]; then
        CACHE_FILE="/tmp/.buildx-cache"
      else
        CACHE_FILE="/tmp/throwaway"
      fi
      echo "::set-output name=cachefile::$CACHE_FILE"

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1

  - name: Build and push Docker images
    uses: docker/build-push-action@v2.8.0
    with:
      push: false
      context: ${{ inputs.context }}
      build-args: |
        BASE_YUM_REPO=${{ inputs.repo }}
        BASE_OSG_SERIES=${{ inputs.osg_series }}
        TIMESTAMP_TAG=${{ inputs.timestamp_tag }}
      tags: "latest"
      cache-to: type=local,dest=${{ steps.generate-cache-file.outputs.cachefile }},mode=max
